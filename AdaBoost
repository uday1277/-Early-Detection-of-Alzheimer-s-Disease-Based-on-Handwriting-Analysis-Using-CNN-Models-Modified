import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load dataset
file_path = "/content/data (3).csv"
df = pd.read_csv(file_path)

# Drop ID column and separate features and target
df = df.drop(columns=['ID'])  # Remove identifier column
X = df.drop(columns=['class'])  # Features
y = df['class']  # Target

# Encode target labels
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)  # Scale entire dataset

# Train AdaBoost Classifier
base_model = DecisionTreeClassifier(max_depth=1)  # Weak learner
adaboost_model = AdaBoostClassifier(base_model, n_estimators=50, learning_rate=1.0, random_state=42)
adaboost_model.fit(X_scaled, y_encoded)

# Predictions on full dataset
y_full_pred = adaboost_model.predict(X_scaled)

# Accuracy on full dataset
full_accuracy = accuracy_score(y_encoded, y_full_pred)
print(f"Full Dataset Accuracy: {full_accuracy:.4f}")

# Classification report
print("\nClassification Report:\n", classification_report(y_encoded, y_full_pred, target_names=label_encoder.classes_))

# Confusion matrix for all 174 samples
conf_matrix_full = confusion_matrix(y_encoded, y_full_pred)

# Visualization of Confusion Matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix_full, annot=True, fmt='d', cmap='Blues', 
            xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix (All 174 Samples)')
plt.show()

# Bar Chart for Healthy vs. Unhealthy Predictions
labels = label_encoder.classes_
unique, counts = np.unique(y_full_pred, return_counts=True)
plt.figure(figsize=(6, 4))
plt.bar(labels, counts, color=['green', 'red'])
plt.xlabel('Class')
plt.ylabel('Count')
plt.title('Prediction Distribution (Healthy vs Unhealthy)')
plt.show()
