import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv1D, MaxPooling1D, Flatten, Dense

# Load dataset
file_path = "/content/data (3).csv"
df = pd.read_csv(file_path)

# Drop ID column and separate features and target
df = df.drop(columns=['ID'])  # Remove identifier column
X = df.drop(columns=['class'])  # Features
y = df['class']  # Target

# Encode target labels
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)
y_encoded = tf.keras.utils.to_categorical(y_encoded)

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)  # Scale entire dataset
X_scaled = np.expand_dims(X_scaled, axis=2)  # Reshape for CNN input

# Split data
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_encoded, test_size=0.2, random_state=42)

# Build CNN Model
model = Sequential([
    Conv1D(32, kernel_size=3, activation='relu', input_shape=(X_train.shape[1], 1)),
    MaxPooling1D(pool_size=2),
    Flatten(),
    Dense(64, activation='relu'),
    Dense(y_train.shape[1], activation='softmax')
])

# Compile Model
model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

# Train Model
model.fit(X_train, y_train, epochs=20, batch_size=10, validation_data=(X_test, y_test))

# Predictions on full dataset
y_full_pred = model.predict(X_scaled)
y_full_pred_classes = np.argmax(y_full_pred, axis=1)
y_true_classes = np.argmax(y_encoded, axis=1)

# Accuracy on full dataset
full_accuracy = accuracy_score(y_true_classes, y_full_pred_classes)
print(f"Full Dataset Accuracy: {full_accuracy:.4f}")

# Classification report
print("\nClassification Report:\n", classification_report(y_true_classes, y_full_pred_classes, target_names=label_encoder.classes_))

# Confusion matrix for all 174 samples
conf_matrix_full = confusion_matrix(y_true_classes, y_full_pred_classes)

# Visualization of Confusion Matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix_full, annot=True, fmt='d', cmap='Blues', 
            xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix (All 174 Samples)')
plt.show()

# Bar Chart for Healthy vs. Unhealthy Predictions
labels = label_encoder.classes_
unique, counts = np.unique(y_full_pred_classes, return_counts=True)
plt.figure(figsize=(6, 4))
plt.bar(labels, counts, color=['green', 'red'])
plt.xlabel('Class')
plt.ylabel('Count')
plt.title('Prediction Distribution (Healthy vs Unhealthy)')
plt.show()
