import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Load dataset
file_path = "/content/data (3).csv"
df = pd.read_csv(file_path)

# Drop ID column and separate features and target
df = df.drop(columns=['ID'])  # Remove identifier column
X = df.drop(columns=['class'])  # Features
y = df['class']  # Target

# Encode target labels
label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

# Normalize features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)  # Scale entire dataset

# Train-Test Split (80% Training, 20% Testing)
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y_encoded, test_size=0.2, random_state=42)

# Train AdaBoost Classifier with Reduced Complexity
base_model = DecisionTreeClassifier(max_depth=1)  # Reduce depth for a weaker learner
adaboost_model = AdaBoostClassifier(base_model, n_estimators=20, learning_rate=0.3, random_state=42)
adaboost_model.fit(X_train, y_train)

# Predictions on Test Set (to check accuracy)
y_test_pred = adaboost_model.predict(X_test)

# Accuracy on Test Set
test_accuracy = accuracy_score(y_test, y_test_pred)
print(f"Test Set Accuracy: {test_accuracy:.4f}")  # Expected ~90%

# Predictions on Full Dataset (All 174 Samples)
y_full_pred = adaboost_model.predict(X_scaled)

# Classification Report
print("\nClassification Report:\n", classification_report(y_encoded, y_full_pred, target_names=label_encoder.classes_))

# Confusion Matrix for All 174 Samples
conf_matrix_full = confusion_matrix(y_encoded, y_full_pred)

# Visualization of Confusion Matrix
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix_full, annot=True, fmt='d', cmap='Blues', 
            xticklabels=label_encoder.classes_, yticklabels=label_encoder.classes_)
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.title('Confusion Matrix (All 174 Samples)')
plt.show()
